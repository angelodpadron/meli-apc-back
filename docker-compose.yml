services:
  meli-apc:
    build: .
    container_name: meli-apc
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - meli-apc-network
    environment:
      # DB parameters
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: dev
      SPRING_DATASOURCE_PASSWORD: dev
      # Swagger related config
      APP_BASE_URL: ${APP_BASE_URL}
      # Meli parameters
      MELI_SITE_ID: ${MELI_SITE_ID}
      MELI_ACCESS_TOKEN: ${MELI_ACCESS_TOKEN}
      # Admin parameters
      APP_APC_ADMIN_EMAIL: ${ADMIN_EMAIL}
      APP_APC_ADMIN_PASSWORD: ${ADMIN_PASSWORD}

  front:
    image: angelodpadron/meli-apc-front:latest
    container_name: front
    ports:
      - "80:80"
    networks:
      - meli-apc-network

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - meli-apc-network
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - meli-apc
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

networks:
  meli-apc-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin:
